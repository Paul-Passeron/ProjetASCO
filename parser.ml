type token =
  | T_INT_LIT of (
# 3 "parser.mly"
        int
# 6 "parser.ml"
)
  | T_FLOAT_LIT of (
# 4 "parser.mly"
        float
# 11 "parser.ml"
)
  | T_STR_LIT of (
# 5 "parser.mly"
        string
# 16 "parser.ml"
)
  | T_IDENTIFIER of (
# 6 "parser.mly"
        string
# 21 "parser.ml"
)
  | T_BOOL_LIT of (
# 7 "parser.mly"
        bool
# 26 "parser.ml"
)
  | T_NUMBER
  | T_STRING
  | T_BOOLEAN
  | T_ANY
  | T_TYPE
  | T_IF
  | T_ELSE
  | T_WHILE
  | T_RETURN
  | T_LET
  | T_VAR
  | T_FUNCTION
  | T_TYPEOF
  | T_CONST
  | T_OPEN_PAR
  | T_CLOSE_PAR
  | T_OPEN_BRA
  | T_CLOSE_BRA
  | T_OPEN_SQR
  | T_CLOSE_SQR
  | T_COMMA
  | T_DOT
  | T_COLON
  | T_SEMICOLON
  | T_BAR
  | T_PLUS
  | T_MINUS
  | T_MUL
  | T_DIV
  | T_POW
  | T_AND
  | T_OR
  | T_NOT
  | T_LT
  | T_LEQ
  | T_GT
  | T_GEQ
  | T_EQ
  | T_DIFF
  | T_EQQ
  | T_NEQQ
  | T_ASSIGN
  | EOL
  | EOF

open Parsing
let _ = parse_error;;
let yytransl_const = [|
  262 (* T_NUMBER *);
  263 (* T_STRING *);
  264 (* T_BOOLEAN *);
  265 (* T_ANY *);
  266 (* T_TYPE *);
  267 (* T_IF *);
  268 (* T_ELSE *);
  269 (* T_WHILE *);
  270 (* T_RETURN *);
  271 (* T_LET *);
  272 (* T_VAR *);
  273 (* T_FUNCTION *);
  274 (* T_TYPEOF *);
  275 (* T_CONST *);
  276 (* T_OPEN_PAR *);
  277 (* T_CLOSE_PAR *);
  278 (* T_OPEN_BRA *);
  279 (* T_CLOSE_BRA *);
  280 (* T_OPEN_SQR *);
  281 (* T_CLOSE_SQR *);
  282 (* T_COMMA *);
  283 (* T_DOT *);
  284 (* T_COLON *);
  285 (* T_SEMICOLON *);
  286 (* T_BAR *);
  287 (* T_PLUS *);
  288 (* T_MINUS *);
  289 (* T_MUL *);
  290 (* T_DIV *);
  291 (* T_POW *);
  292 (* T_AND *);
  293 (* T_OR *);
  294 (* T_NOT *);
  295 (* T_LT *);
  296 (* T_LEQ *);
  297 (* T_GT *);
  298 (* T_GEQ *);
  299 (* T_EQ *);
  300 (* T_DIFF *);
  301 (* T_EQQ *);
  302 (* T_NEQQ *);
  303 (* T_ASSIGN *);
  304 (* EOL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* T_INT_LIT *);
  258 (* T_FLOAT_LIT *);
  259 (* T_STR_LIT *);
  260 (* T_IDENTIFIER *);
  261 (* T_BOOL_LIT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\003\000\003\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\004\000\004\000\
\004\000\004\000\019\000\019\000\019\000\017\000\018\000\018\000\
\018\000\016\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\006\000\006\000\006\000\
\006\000\020\000\020\000\020\000\020\000\021\000\021\000\007\000\
\007\000\008\000\008\000\009\000\009\000\012\000\012\000\010\000\
\010\000\010\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\013\000\013\000\014\000\
\014\000\015\000\015\000\015\000\015\000\022\000\022\000\022\000\
\022\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\002\000\003\000\001\000\001\000\003\000\
\005\000\003\000\002\000\002\000\007\000\005\000\009\000\004\000\
\003\000\003\000\003\000\000\000\001\000\003\000\003\000\002\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\004\000\001\000\004\000\003\000\
\003\000\002\000\002\000\001\000\001\000\001\000\000\000\004\000\
\002\000\001\000\003\000\001\000\000\000\003\000\003\000\001\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\001\000\001\000\001\000\001\000\002\000\000\000\003\000\
\001\000\003\000\003\000\001\000\000\000\002\000\002\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\027\000\028\000\029\000\038\000\030\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\003\000\
\098\000\000\000\007\000\000\000\000\000\000\000\031\000\032\000\
\033\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\002\000\000\000\000\000\000\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
\000\000\000\000\017\000\008\000\000\000\018\000\041\000\000\000\
\042\000\043\000\000\000\026\000\005\000\000\000\035\000\000\000\
\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\067\000\069\000\059\000\068\000\
\060\000\062\000\061\000\063\000\000\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\051\000\052\000\000\000\
\000\000\023\000\019\000\037\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\065\000\000\000\000\000\000\000\064\000\058\000\055\000\054\000\
\000\000\000\000\000\000\074\000\075\000\013\000\000\000\046\000\
\000\000\015\000"

let yydgoto = "\002\000\
\025\000\050\000\027\000\051\000\029\000\030\000\041\000\042\000\
\144\000\135\000\136\000\137\000\089\000\152\000\153\000\031\000\
\052\000\053\000\056\000\054\000\177\000\032\000\033\000"

let yysindex = "\010\000\
\109\000\000\000\000\000\000\000\000\000\000\000\000\000\043\255\
\038\255\060\255\202\255\114\255\114\255\127\255\141\000\114\255\
\141\000\097\255\141\000\000\000\141\000\141\000\141\000\000\000\
\000\000\109\000\000\000\109\000\139\001\078\255\000\000\000\000\
\000\000\085\255\141\000\141\000\155\255\000\000\166\001\133\255\
\137\255\135\255\136\255\146\255\211\255\148\255\193\001\150\255\
\000\000\138\255\138\255\153\255\157\255\159\255\220\001\160\255\
\112\000\112\000\211\255\000\000\000\000\141\000\141\000\183\255\
\000\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
\141\000\141\000\210\255\247\001\018\002\150\255\000\000\210\255\
\142\255\114\255\000\000\000\000\114\255\000\000\000\000\141\000\
\000\000\000\000\155\255\000\000\000\000\141\000\000\000\172\255\
\045\002\000\000\112\000\112\000\204\002\204\002\184\002\006\255\
\164\255\211\255\215\002\215\002\215\002\215\002\250\254\250\254\
\250\254\250\254\164\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\210\255\191\255\000\000\166\255\
\167\255\170\255\170\255\174\255\141\000\000\000\000\000\179\255\
\072\002\000\000\000\000\000\000\000\000\061\255\181\255\077\255\
\187\255\196\255\210\255\210\255\213\255\000\000\072\002\133\255\
\000\000\210\255\191\255\191\255\000\000\000\000\000\000\000\000\
\170\255\201\255\174\255\000\000\000\000\000\000\138\255\000\000\
\204\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\203\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\179\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\255\
\101\255\000\000\000\000\000\000\028\255\000\000\000\000\151\000\
\000\000\206\255\212\255\214\255\000\000\000\000\244\254\000\000\
\242\002\002\003\082\003\000\000\000\000\215\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\255\000\000\000\000\000\000\218\255\000\000\000\000\000\000\
\000\000\000\000\240\255\000\000\000\000\015\255\000\000\000\000\
\000\000\000\000\018\003\034\003\050\003\066\003\067\255\004\001\
\206\000\089\003\099\002\122\002\145\002\168\002\031\001\058\001\
\085\001\112\001\233\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\241\255\000\000\001\000\
\039\000\000\000\000\000\253\254\000\000\000\000\000\000\000\000\
\110\255\000\000\000\000\000\000\000\000\000\000\012\255\242\255\
\000\000\000\000\000\000\000\000\077\000\000\000\055\255\219\255\
\000\000\000\000\241\255\241\255\000\000\000\000\000\000\000\000\
\000\000\000\000\121\255\000\000\000\000\000\000\243\255\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\252\255\255\255\000\000\006\000\249\255\000\000\000\000\004\000\
\000\000\173\255\224\255\000\000\122\000\000\000\238\255\000\000\
\000\000\170\000\200\255\208\255\000\000\000\000\000\000"

let yytablesize = 1142
let yytable = "\026\000\
\056\000\097\000\098\000\039\000\140\000\104\000\028\000\045\000\
\021\000\047\000\001\000\055\000\021\000\057\000\058\000\059\000\
\043\000\070\000\070\000\046\000\064\000\060\000\070\000\061\000\
\026\000\070\000\026\000\084\000\085\000\071\000\072\000\028\000\
\064\000\028\000\073\000\020\000\049\000\073\000\057\000\020\000\
\073\000\049\000\072\000\070\000\049\000\147\000\034\000\081\000\
\081\000\150\000\081\000\081\000\081\000\081\000\055\000\105\000\
\081\000\035\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\121\000\122\000\123\000\048\000\014\000\071\000\171\000\036\000\
\048\000\161\000\071\000\048\000\154\000\071\000\097\000\097\000\
\145\000\097\000\097\000\097\000\097\000\142\000\055\000\097\000\
\143\000\003\000\004\000\005\000\048\000\007\000\163\000\071\000\
\097\000\164\000\008\000\009\000\024\000\010\000\011\000\012\000\
\013\000\014\000\015\000\016\000\017\000\040\000\018\000\049\000\
\019\000\050\000\167\000\168\000\082\000\020\000\176\000\021\000\
\022\000\050\000\044\000\083\000\022\000\159\000\023\000\022\000\
\157\000\158\000\003\000\004\000\005\000\006\000\007\000\072\000\
\172\000\173\000\072\000\008\000\009\000\072\000\010\000\011\000\
\012\000\013\000\014\000\015\000\016\000\017\000\086\000\018\000\
\088\000\019\000\090\000\091\000\092\000\093\000\020\000\174\000\
\021\000\022\000\003\000\004\000\005\000\006\000\007\000\023\000\
\094\000\096\000\099\000\100\000\009\000\101\000\010\000\011\000\
\103\000\013\000\106\000\015\000\141\000\017\000\064\000\018\000\
\148\000\019\000\151\000\155\000\156\000\154\000\020\000\160\000\
\021\000\022\000\003\000\004\000\005\000\006\000\007\000\023\000\
\162\000\165\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\015\000\166\000\017\000\175\000\037\000\
\169\000\019\000\178\000\020\000\044\000\133\000\038\000\134\000\
\021\000\022\000\045\000\020\000\025\000\064\000\053\000\023\000\
\071\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\056\000\056\000\056\000\056\000\056\000\024\000\077\000\
\076\000\047\000\056\000\056\000\146\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\170\000\056\000\000\000\000\000\056\000\000\000\056\000\
\056\000\000\000\000\000\000\000\000\000\000\000\056\000\057\000\
\057\000\057\000\057\000\057\000\000\000\000\000\000\000\056\000\
\057\000\057\000\000\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\000\000\
\057\000\000\000\000\000\057\000\000\000\057\000\057\000\000\000\
\000\000\000\000\000\000\000\000\057\000\014\000\014\000\014\000\
\014\000\014\000\000\000\000\000\000\000\057\000\014\000\014\000\
\000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\000\000\014\000\014\000\014\000\000\000\000\000\000\000\
\000\000\014\000\000\000\014\000\014\000\003\000\004\000\005\000\
\006\000\007\000\014\000\000\000\000\000\000\000\008\000\009\000\
\000\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\000\000\018\000\000\000\019\000\000\000\000\000\000\000\
\000\000\020\000\064\000\021\000\022\000\003\000\004\000\005\000\
\006\000\007\000\023\000\071\000\072\000\000\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\015\000\000\000\
\017\000\000\000\037\000\000\000\019\000\000\000\000\000\000\000\
\000\000\000\000\038\000\021\000\022\000\000\000\038\000\000\000\
\000\000\038\000\023\000\038\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\034\000\034\000\
\000\000\034\000\034\000\034\000\034\000\034\000\000\000\034\000\
\000\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\095\000\095\000\000\000\095\000\095\000\095\000\095\000\
\000\000\000\000\095\000\000\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\036\000\036\000\000\000\036\000\
\036\000\036\000\036\000\000\000\000\000\036\000\000\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\094\000\
\094\000\000\000\094\000\094\000\094\000\094\000\000\000\000\000\
\094\000\000\000\094\000\094\000\094\000\094\000\094\000\094\000\
\000\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\094\000\090\000\090\000\000\000\090\000\090\000\090\000\
\090\000\000\000\000\000\090\000\000\000\090\000\090\000\090\000\
\090\000\090\000\000\000\000\000\090\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\091\000\091\000\000\000\
\091\000\091\000\091\000\091\000\000\000\000\000\091\000\000\000\
\091\000\091\000\091\000\091\000\091\000\000\000\000\000\091\000\
\091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
\092\000\092\000\000\000\092\000\092\000\092\000\092\000\000\000\
\000\000\092\000\000\000\092\000\092\000\092\000\092\000\092\000\
\000\000\000\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\092\000\092\000\093\000\093\000\000\000\093\000\093\000\
\093\000\093\000\000\000\000\000\093\000\000\000\093\000\093\000\
\093\000\093\000\093\000\000\000\000\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\093\000\062\000\000\000\
\000\000\000\000\063\000\000\000\000\000\064\000\000\000\065\000\
\000\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\062\000\000\000\000\000\000\000\063\000\000\000\000\000\
\064\000\000\000\087\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\062\000\095\000\000\000\000\000\
\063\000\000\000\000\000\064\000\000\000\000\000\000\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\062\000\
\000\000\000\000\000\000\063\000\000\000\102\000\064\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\062\000\138\000\000\000\000\000\063\000\000\000\
\000\000\064\000\000\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\062\000\139\000\000\000\
\000\000\063\000\000\000\000\000\064\000\000\000\000\000\000\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\062\000\000\000\000\000\000\000\063\000\149\000\000\000\064\000\
\000\000\000\000\000\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\062\000\000\000\000\000\000\000\063\000\
\000\000\000\000\064\000\000\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\086\000\086\000\
\000\000\086\000\086\000\086\000\086\000\000\000\000\000\086\000\
\000\000\086\000\086\000\086\000\086\000\086\000\000\000\000\000\
\086\000\086\000\086\000\086\000\086\000\087\000\087\000\000\000\
\087\000\087\000\087\000\087\000\000\000\000\000\087\000\000\000\
\087\000\087\000\087\000\087\000\087\000\000\000\000\000\087\000\
\087\000\087\000\087\000\087\000\088\000\088\000\000\000\088\000\
\088\000\088\000\088\000\000\000\000\000\088\000\000\000\088\000\
\088\000\088\000\088\000\088\000\000\000\000\000\088\000\088\000\
\088\000\088\000\088\000\089\000\089\000\000\000\089\000\089\000\
\089\000\089\000\000\000\000\000\089\000\000\000\089\000\089\000\
\089\000\089\000\089\000\000\000\000\000\089\000\089\000\089\000\
\089\000\089\000\064\000\000\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\000\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\064\000\000\000\
\000\000\000\000\066\000\067\000\000\000\000\000\000\000\071\000\
\072\000\064\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\071\000\072\000\000\000\000\000\000\000\000\000\
\000\000\078\000\079\000\080\000\081\000\079\000\079\000\000\000\
\079\000\079\000\079\000\079\000\000\000\000\000\079\000\000\000\
\079\000\079\000\079\000\079\000\079\000\080\000\080\000\079\000\
\080\000\080\000\080\000\080\000\000\000\000\000\080\000\000\000\
\080\000\080\000\080\000\080\000\080\000\082\000\082\000\080\000\
\082\000\082\000\082\000\082\000\000\000\000\000\082\000\000\000\
\082\000\082\000\082\000\082\000\082\000\083\000\083\000\082\000\
\083\000\083\000\083\000\083\000\000\000\000\000\083\000\000\000\
\083\000\083\000\083\000\083\000\083\000\084\000\084\000\083\000\
\084\000\084\000\084\000\084\000\000\000\000\000\084\000\000\000\
\000\000\000\000\084\000\084\000\084\000\085\000\085\000\084\000\
\085\000\085\000\085\000\085\000\000\000\000\000\085\000\000\000\
\000\000\000\000\085\000\085\000\085\000\078\000\078\000\085\000\
\078\000\078\000\078\000\078\000\096\000\096\000\078\000\096\000\
\096\000\096\000\096\000\000\000\000\000\096\000"

let yycheck = "\001\000\
\000\000\050\000\051\000\011\000\088\000\062\000\001\000\015\000\
\021\001\017\000\001\000\019\000\025\001\021\000\022\000\023\000\
\013\000\021\001\022\001\016\000\027\001\026\000\026\001\028\000\
\026\000\029\001\028\000\035\000\036\000\036\001\037\001\026\000\
\027\001\028\000\023\001\021\001\021\001\026\001\000\000\025\001\
\029\001\026\001\037\001\047\001\029\001\102\000\004\001\020\001\
\021\001\133\000\023\001\024\001\025\001\026\001\062\000\063\000\
\029\001\020\001\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\021\001\000\000\021\001\162\000\020\001\
\026\001\021\001\026\001\029\001\024\001\029\001\020\001\021\001\
\096\000\023\001\024\001\025\001\026\001\090\000\102\000\029\001\
\093\000\001\001\002\001\003\001\004\001\005\001\026\001\047\001\
\038\001\029\001\010\001\011\001\000\000\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\004\001\022\001\023\001\
\024\001\021\001\155\000\156\000\047\001\029\001\175\000\031\001\
\032\001\029\001\004\001\047\001\023\001\141\000\038\001\026\001\
\138\000\139\000\001\001\002\001\003\001\004\001\005\001\023\001\
\163\000\164\000\026\001\010\001\011\001\029\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\004\001\022\001\
\028\001\024\001\026\001\029\001\029\001\020\001\029\001\169\000\
\031\001\032\001\001\001\002\001\003\001\004\001\005\001\038\001\
\029\001\028\001\026\001\023\001\011\001\023\001\013\001\014\001\
\025\001\016\001\004\001\018\001\047\001\020\001\027\001\022\001\
\021\001\024\001\004\001\030\001\030\001\024\001\029\001\021\001\
\031\001\032\001\001\001\002\001\003\001\004\001\005\001\038\001\
\028\001\023\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\018\001\025\001\020\001\022\001\022\001\
\012\001\024\001\023\001\025\001\023\001\020\001\029\001\022\001\
\031\001\032\001\023\001\021\001\023\001\027\001\021\001\038\001\
\022\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\001\001\002\001\003\001\004\001\005\001\023\001\023\001\
\023\001\023\001\010\001\011\001\099\000\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\160\000\026\001\255\255\255\255\029\001\255\255\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\038\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\047\001\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\026\001\255\255\255\255\029\001\255\255\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\038\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\047\001\010\001\011\001\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\023\001\024\001\255\255\255\255\255\255\
\255\255\029\001\255\255\031\001\032\001\001\001\002\001\003\001\
\004\001\005\001\038\001\255\255\255\255\255\255\010\001\011\001\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\255\255\029\001\027\001\031\001\032\001\001\001\002\001\003\001\
\004\001\005\001\038\001\036\001\037\001\255\255\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\018\001\255\255\
\020\001\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\020\001\031\001\032\001\255\255\024\001\255\255\
\255\255\027\001\038\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\255\255\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\020\001\021\001\255\255\023\001\024\001\025\001\026\001\
\255\255\255\255\029\001\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\020\001\
\021\001\255\255\023\001\024\001\025\001\026\001\255\255\255\255\
\029\001\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\020\001\021\001\255\255\023\001\024\001\025\001\
\026\001\255\255\255\255\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\020\001\021\001\255\255\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\020\001\021\001\255\255\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\020\001\021\001\255\255\023\001\024\001\
\025\001\026\001\255\255\255\255\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\020\001\255\255\
\255\255\255\255\024\001\255\255\255\255\027\001\255\255\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\020\001\255\255\255\255\255\255\024\001\255\255\255\255\
\027\001\255\255\029\001\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\020\001\021\001\255\255\255\255\
\024\001\255\255\255\255\027\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\020\001\
\255\255\255\255\255\255\024\001\255\255\026\001\027\001\255\255\
\255\255\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\020\001\021\001\255\255\255\255\024\001\255\255\
\255\255\027\001\255\255\255\255\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\020\001\021\001\255\255\
\255\255\024\001\255\255\255\255\027\001\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\020\001\255\255\255\255\255\255\024\001\025\001\255\255\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\020\001\255\255\255\255\255\255\024\001\
\255\255\255\255\027\001\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\255\255\255\255\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\038\001\039\001\040\001\041\001\042\001\020\001\021\001\255\255\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\020\001\021\001\255\255\023\001\024\001\
\025\001\026\001\255\255\255\255\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\027\001\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\027\001\255\255\
\255\255\255\255\031\001\032\001\255\255\255\255\255\255\036\001\
\037\001\027\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\043\001\044\001\045\001\046\001\020\001\021\001\255\255\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\020\001\021\001\038\001\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\020\001\021\001\038\001\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\020\001\021\001\038\001\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\020\001\021\001\038\001\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\034\001\035\001\020\001\021\001\038\001\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\034\001\035\001\020\001\021\001\038\001\
\023\001\024\001\025\001\026\001\020\001\021\001\029\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001"

let yynames_const = "\
  T_NUMBER\000\
  T_STRING\000\
  T_BOOLEAN\000\
  T_ANY\000\
  T_TYPE\000\
  T_IF\000\
  T_ELSE\000\
  T_WHILE\000\
  T_RETURN\000\
  T_LET\000\
  T_VAR\000\
  T_FUNCTION\000\
  T_TYPEOF\000\
  T_CONST\000\
  T_OPEN_PAR\000\
  T_CLOSE_PAR\000\
  T_OPEN_BRA\000\
  T_CLOSE_BRA\000\
  T_OPEN_SQR\000\
  T_CLOSE_SQR\000\
  T_COMMA\000\
  T_DOT\000\
  T_COLON\000\
  T_SEMICOLON\000\
  T_BAR\000\
  T_PLUS\000\
  T_MINUS\000\
  T_MUL\000\
  T_DIV\000\
  T_POW\000\
  T_AND\000\
  T_OR\000\
  T_NOT\000\
  T_LT\000\
  T_LEQ\000\
  T_GT\000\
  T_GEQ\000\
  T_EQ\000\
  T_DIFF\000\
  T_EQQ\000\
  T_NEQQ\000\
  T_ASSIGN\000\
  EOL\000\
  EOF\000\
  "

let yynames_block = "\
  T_INT_LIT\000\
  T_FLOAT_LIT\000\
  T_STR_LIT\000\
  T_IDENTIFIER\000\
  T_BOOL_LIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.instruction) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.program) in
    Obj.repr(
# 63 "parser.mly"
                  ( (Stmt _1) :: _2 )
# 599 "parser.ml"
               : Tpscrpt.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.program) in
    Obj.repr(
# 64 "parser.mly"
                  ( (Decl _1) :: _2 )
# 607 "parser.ml"
               : Tpscrpt.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
                  ( [] )
# 613 "parser.ml"
               : Tpscrpt.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
                                                        ( Compound [] )
# 619 "parser.ml"
               : Tpscrpt.instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'instr_list) in
    Obj.repr(
# 69 "parser.mly"
                                                        ( Compound _2 )
# 626 "parser.ml"
               : Tpscrpt.instruction))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
                                                        ( Empty )
# 632 "parser.ml"
               : Tpscrpt.instruction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.instruction) in
    Obj.repr(
# 73 "parser.mly"
                                                        ( _1 )
# 639 "parser.ml"
               : Tpscrpt.instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.binding list) in
    Obj.repr(
# 74 "parser.mly"
                                                        ( VarDecl _2 )
# 646 "parser.ml"
               : Tpscrpt.instruction))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.instruction) in
    Obj.repr(
# 75 "parser.mly"
                                                        ( While (_3, _5) )
# 654 "parser.ml"
               : Tpscrpt.instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.expression) in
    Obj.repr(
# 76 "parser.mly"
                                                        ( Return (Some _2) )
# 661 "parser.ml"
               : Tpscrpt.instruction))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
                                                    ( Return None )
# 667 "parser.ml"
               : Tpscrpt.instruction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.expression) in
    Obj.repr(
# 78 "parser.mly"
                                                        ( Expr _1 )
# 674 "parser.ml"
               : Tpscrpt.instruction))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Tpscrpt.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.instruction) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.instruction) in
    Obj.repr(
# 79 "parser.mly"
                                                        ( If (_3, _5, Some _7) )
# 683 "parser.ml"
               : Tpscrpt.instruction))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.instruction) in
    Obj.repr(
# 80 "parser.mly"
                                                       ( If (_3, _5, None) )
# 691 "parser.ml"
               : Tpscrpt.instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Tpscrpt.binding list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Tpscrpt.type_ option) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'instr_list_empty) in
    Obj.repr(
# 84 "parser.mly"
                                                                                                                        ( Func (_2, _4, _6, _8) )
# 701 "parser.ml"
               : Tpscrpt.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.type_) in
    Obj.repr(
# 85 "parser.mly"
                                                                ( Alias (_2, _4) )
# 709 "parser.ml"
               : Tpscrpt.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.binding list) in
    Obj.repr(
# 86 "parser.mly"
                                                                ( Let _2 )
# 716 "parser.ml"
               : Tpscrpt.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.binding list) in
    Obj.repr(
# 87 "parser.mly"
                                                                ( Const _2 )
# 723 "parser.ml"
               : Tpscrpt.declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression list) in
    Obj.repr(
# 90 "parser.mly"
                                ( _1 :: _3 )
# 731 "parser.ml"
               : Tpscrpt.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                                ( [] )
# 737 "parser.ml"
               : Tpscrpt.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 92 "parser.mly"
                                ( [_1] )
# 744 "parser.ml"
               : Tpscrpt.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 95 "parser.mly"
                            ( _1, _3 )
# 752 "parser.ml"
               : string * Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Tpscrpt.expression) list) in
    Obj.repr(
# 98 "parser.mly"
                                                        ( _1 :: _3 )
# 760 "parser.ml"
               : (string * Tpscrpt.expression) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Tpscrpt.expression) in
    Obj.repr(
# 99 "parser.mly"
                                                        ( [_1] )
# 767 "parser.ml"
               : (string * Tpscrpt.expression) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Tpscrpt.expression) in
    Obj.repr(
# 100 "parser.mly"
                                                        ( [_1] )
# 774 "parser.ml"
               : (string * Tpscrpt.expression) list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (string * Tpscrpt.expression) list) in
    Obj.repr(
# 103 "parser.mly"
                                                    ( Obj _2 )
# 781 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 106 "parser.mly"
                                                    ( IntConst _1 )
# 788 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 107 "parser.mly"
                                                      ( FloatConst _1 )
# 795 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
                                                    ( StringConst _1 )
# 802 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 109 "parser.mly"
               (BoolConst _1)
# 809 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 110 "parser.mly"
                                                    ( _1 )
# 816 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unop) in
    Obj.repr(
# 111 "parser.mly"
         (_1)
# 823 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop) in
    Obj.repr(
# 112 "parser.mly"
          (_1)
# 830 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.left_member) in
    Obj.repr(
# 113 "parser.mly"
                                                    ( LeftMember _1 )
# 837 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.expression list) in
    Obj.repr(
# 114 "parser.mly"
                                                    ( Tab _2 )
# 844 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.left_member) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 115 "parser.mly"
                                                    ( Assign (_1, _3) )
# 852 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.expression list) in
    Obj.repr(
# 116 "parser.mly"
                                                    ( Funcall (_1, _3) )
# 860 "parser.ml"
               : Tpscrpt.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 119 "parser.mly"
                                      ( Identifier _1 )
# 867 "parser.ml"
               : Tpscrpt.left_member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.expression) in
    Obj.repr(
# 120 "parser.mly"
                                      ( Subscript (_1, _3) )
# 875 "parser.ml"
               : Tpscrpt.left_member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 121 "parser.mly"
                                      ( Access (_1, _3) )
# 883 "parser.ml"
               : Tpscrpt.left_member))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.expression) in
    Obj.repr(
# 122 "parser.mly"
                                      ( Expr _2 )
# 890 "parser.ml"
               : Tpscrpt.left_member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.instruction) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 126 "parser.mly"
                     ( (Stmt _1) :: _2 )
# 898 "parser.ml"
               : 'instr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 127 "parser.mly"
                     ( (Decl _1) :: _2 )
# 906 "parser.ml"
               : 'instr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.instruction) in
    Obj.repr(
# 128 "parser.mly"
                     ( [Stmt _1] )
# 913 "parser.ml"
               : 'instr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.declaration) in
    Obj.repr(
# 129 "parser.mly"
                     ( [Decl _1] )
# 920 "parser.ml"
               : 'instr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 132 "parser.mly"
                ( _1 )
# 927 "parser.ml"
               : 'instr_list_empty))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
                ( [] )
# 933 "parser.ml"
               : 'instr_list_empty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.type_ option) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 136 "parser.mly"
                                        ( _1, _2, Some _4 )
# 942 "parser.ml"
               : Tpscrpt.binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.type_ option) in
    Obj.repr(
# 137 "parser.mly"
                                        ( _1, _2, None )
# 950 "parser.ml"
               : Tpscrpt.binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.binding) in
    Obj.repr(
# 140 "parser.mly"
                                  ( [_1] )
# 957 "parser.ml"
               : Tpscrpt.binding list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.binding) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.binding list) in
    Obj.repr(
# 141 "parser.mly"
                                  ( _1 :: _3 )
# 965 "parser.ml"
               : Tpscrpt.binding list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.binding list) in
    Obj.repr(
# 144 "parser.mly"
                  ( _1 )
# 972 "parser.ml"
               : Tpscrpt.binding list))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
                  ( [] )
# 978 "parser.ml"
               : Tpscrpt.binding list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.type_ list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.type_) in
    Obj.repr(
# 148 "parser.mly"
                                ( _3 :: _1 )
# 986 "parser.ml"
               : Tpscrpt.type_ list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.type_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.type_) in
    Obj.repr(
# 149 "parser.mly"
                                ( [_1; _3] )
# 994 "parser.ml"
               : Tpscrpt.type_ list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.type_) in
    Obj.repr(
# 152 "parser.mly"
                                      ( _1 )
# 1001 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.type_ list) in
    Obj.repr(
# 153 "parser.mly"
                                      ( TypeUnion _1 )
# 1008 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.type_) in
    Obj.repr(
# 154 "parser.mly"
                                      ( TypeTab _1 )
# 1015 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 157 "parser.mly"
                                              ( TypeIdentifier _1 )
# 1022 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "parser.mly"
                                              ( TypeNumber )
# 1028 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "parser.mly"
                                              ( TypeBoolean )
# 1034 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
                                              ( TypeString )
# 1040 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "parser.mly"
                                              ( TypeAny )
# 1046 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.object_member list) in
    Obj.repr(
# 162 "parser.mly"
                                              ( TypeObject _2 )
# 1053 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tpscrpt.type_) in
    Obj.repr(
# 163 "parser.mly"
                                              ( _2 )
# 1060 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 164 "parser.mly"
                                              ( TypeCte (IntConst _1) )
# 1067 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 165 "parser.mly"
                                              ( TypeCte (FloatConst _1) )
# 1074 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 166 "parser.mly"
                                              ( TypeCte (BoolConst _1) )
# 1081 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 167 "parser.mly"
                                              ( TypeCte (StringConst _1) )
# 1088 "parser.ml"
               : Tpscrpt.type_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.type_) in
    Obj.repr(
# 170 "parser.mly"
                  ( Some _2 )
# 1095 "parser.ml"
               : Tpscrpt.type_ option))
; (fun __caml_parser_env ->
    Obj.repr(
# 171 "parser.mly"
                  ( None )
# 1101 "parser.ml"
               : Tpscrpt.type_ option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.type_) in
    Obj.repr(
# 174 "parser.mly"
                               ( _1, _3 )
# 1109 "parser.ml"
               : Tpscrpt.object_member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 175 "parser.mly"
                  ( _1, TypeAny )
# 1116 "parser.ml"
               : Tpscrpt.object_member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.object_member) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.object_member list) in
    Obj.repr(
# 178 "parser.mly"
                                                  ( _1 :: _3 )
# 1124 "parser.ml"
               : Tpscrpt.object_member list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.object_member) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.object_member list) in
    Obj.repr(
# 179 "parser.mly"
                                                  ( _1 :: _3 )
# 1132 "parser.ml"
               : Tpscrpt.object_member list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.object_member) in
    Obj.repr(
# 180 "parser.mly"
                                                  ( [_1] )
# 1139 "parser.ml"
               : Tpscrpt.object_member list))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "parser.mly"
                                                  ( [] )
# 1145 "parser.ml"
               : Tpscrpt.object_member list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 184 "parser.mly"
                   (Unary (UnOpNot, _2) )
# 1152 "parser.ml"
               : 'unop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 185 "parser.mly"
                   (Unary (UnOpPlus, _2) )
# 1159 "parser.ml"
               : 'unop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 186 "parser.mly"
                   (Unary (UnOpMinus, _2) )
# 1166 "parser.ml"
               : 'unop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 187 "parser.mly"
                   (Unary (UnOpTypeof, _2) )
# 1173 "parser.ml"
               : 'unop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 190 "parser.mly"
                      ( Binary (_1, BinOpPlus, _3) )
# 1181 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 191 "parser.mly"
                      ( Binary (_1, BinOpMinus, _3) )
# 1189 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 192 "parser.mly"
                      ( Binary (_1, BinOpMul, _3) )
# 1197 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 193 "parser.mly"
                      ( Binary (_1, BinOpDiv, _3) )
# 1205 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 194 "parser.mly"
                      ( Binary (_1, BinOpLt, _3) )
# 1213 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 195 "parser.mly"
                      ( Binary (_1, BinOpLeq, _3) )
# 1221 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 196 "parser.mly"
                      ( Binary (_1, BinOpGt, _3) )
# 1229 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 197 "parser.mly"
                      ( Binary (_1, BinOpGeq, _3) )
# 1237 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 198 "parser.mly"
                      ( Binary (_1, BinOpEq, _3) )
# 1245 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 199 "parser.mly"
                      ( Binary (_1, BinOpDif, _3) )
# 1253 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 200 "parser.mly"
                      ( Binary (_1, BinOpEqq, _3) )
# 1261 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 201 "parser.mly"
                      ( Binary (_1, BinOpNeqq, _3) )
# 1269 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 202 "parser.mly"
                      ( Binary (_1, BinOpAnd, _3) )
# 1277 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 203 "parser.mly"
                      ( Binary (_1, BinOpOr, _3) )
# 1285 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 204 "parser.mly"
                      ( Binary (_1, BinOpNot, _3) )
# 1293 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tpscrpt.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tpscrpt.expression) in
    Obj.repr(
# 205 "parser.mly"
                      ( Binary (_1, BinOpPow, _3) )
# 1301 "parser.ml"
               : 'binop))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Tpscrpt.program)
